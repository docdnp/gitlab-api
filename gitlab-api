#!/usr/bin/env bash
GL_CONFIG_DIR=${GL_CONFIG_DIR:-~/.glapi}
GL_CONFIG=${GL_CONFIG:-$GL_CONFIG_DIR/glapi.conf}
GL_BINDIR=${GL_BINDIR:-$GL_CONFIG_DIR/bin}
GL_CONFIG_VARIABLES='TOKEN|SERVER|USERNAME|TEMPLATE_HOST|REGISTRY'
GL_URL_CURL=https://everything.curl.dev/get
GL_URL_DOCKER=https://docs.docker.com/engine/install
GL_URL_GRON=https://github.com/tomnomnom/gron/releases
GL_URL_YQ=https://github.com/mikefarah/yq/releases
GL_URL_APIDOCS=https://docs.gitlab.com/ee/api/rest
GL_CURL_DOCKER_IMG=curlimages/curl:latest
export PATH=$GL_BINDIR:$PATH

CURL=curl

# ------------------------------------------------------------------------------------------------------------------
# Setup
# ------------------------------------------------------------------------------------------------------------------
exiterr   () { echo "Error: $@"; glhelp 1; }
installed () { command -v "$1" >&/dev/null; }
install-locally () {
    installed $1 && return
    local app="$1" url="$2" pattern="${3:-app-kernel-arch-version.tgz}"
    local kernel="$(uname -s | tr '[:upper:]' '[:lower:]')"
    local arch="$(uname -a | grep -i arm || echo amd)$(uname -p | grep -Eo '386|64')"
    echo -n "info: $app is missing: installing it locally under $GL_BINDIR ..." 1>&2 
    mkdir -p $GL_BINDIR
    tmpapp=$(mktemp)
    $CURL -Ls $url -o /dev/stdout \
        | grep -E download/.*gz | grep -Po '/[^"]+/v\d+\.\d+\.\d+' | sort -u | { 
            read urlstem 
            local version=${urlstem//*\/v/}
            pattern=${pattern/app/$app}
            pattern=${pattern/version/$version}
            pattern=${pattern/kernel/$kernel}
            pattern=${pattern/arch/$arch}
            $CURL -Ls https://github.com$urlstem/$pattern  \
                | tar xzf - -O > $tmpapp
        } \
    && chmod +x $tmpapp && { $tmpapp --help >& $tmpapp.help ; } || {
        echo " failed"
        rm $tmpapp*
        echo "Error: Couldn't install $app. Try to install it manually: $url"
        exit 1
    }
    mv $tmpapp $GL_BINDIR/$app
    echo " success" 1>&2
}
check_preconditions () {
    ! installed docker && ! installed $CURL && { echo "Error: Neither docker or at least curl are available:
        * see: $GL_URL_CURL
        * see: $GL_URL_DOCKER
        "
        exit 1
    }
    installed $CURL || {
        echo -n "info: curl is missing using docker image instead $GL_CURL_DOCKER_IMG ..." 1>&2 
        mkdir -p $GL_BINDIR
        echo -e '#!/usr/bin/env bash\ndocker run -i --rm curlimages/curl "$@"' > $GL_BINDIR/curl
        chmod +x $GL_BINDIR/curl
        echo " success" 1>&2
    }
    install-locally yq   $GL_URL_YQ   app_kernel_arch.tar.gz
    install-locally gron $GL_URL_GRON app-kernel-arch-version.tgz

    read_config
    for var in ${GL_CONFIG_VARIABLES//|/ } ; do
        eval "[ -z \"\${GL_$var}\" ]" && exiterr "Either set $var, or call: gitlab-api init"
    done
}
read_config () {
    if [ -e "$GL_CONFIG" ] ; then
        GLAPI_CONF=$(grep -P '^\s*GL_('"${GL_CONFIG_VARIABLES}"')\s*=' $GL_CONFIG | sed -re 's/\s+//g' -e 's/^(.+)$/export \1/g')
        eval $GLAPI_CONF
    fi
}
# ------------------------------------------------------------------------------------------------------------------
# Gitlab API functions
# ------------------------------------------------------------------------------------------------------------------
# init                                create configuration file ~/.glapi/glapi.conf
glinit () {
    echo Setting up configuration...
    installed git  || exiterr "git is not installed"
    installed perl || exiterr "perl is not installed"
    read_config
    USERNAME="$(    [ -n "$GL_USERNAME"      ] && echo $GL_USERNAME      || git config user.name)"
    TPL_REGHOST="$( [ -n "$GL_TEMPLATE_HOST" ] && echo $GL_TEMPLATE_HOST || echo registry.gitlab.com)"
    SERVER="$(      [ -n "$GL_SERVER"        ] && echo $GL_SERVER   || git remote get-url origin | perl -pe 's{^(?:git|https?://|git@)(.+?)[:/].*}{$1}')"
    REGISTRY="$(    [ -n "$GL_REGISTRY"      ] && echo $GL_REGISTRY_HOST || echo ${SERVER/gitlab/registry-gitlab})"
    [ -n "$GL_USERNAME"      ] || read -p "Enter your Gitlab Username     : " -ei "$USERNAME"      GL_USERNAME
    [ -n "$GL_TOKEN"         ] || read -p "Enter your Gitlab Token        : " -ei "$GL_TOKEN"      GL_TOKEN
    [ -n "$GL_SERVER"        ] || read -p "Enter your Gitlab Server       : " -ei "$SERVER"        GL_SERVER
    [ -n "$GL_REGISTRY"      ] || read -p "Enter your Gitlab Registry     : " -ei "$REGISTRY"      GL_REGISTRY
    [ -n "$GL_TEMPLATE_HOST" ] || read -p "Enter your Gitlab Template Host: " -ei "$TPL_REGHOST"   GL_TEMPLATE_HOST
    [ -z "$GL_USERNAME" ] || [ -z "$GL_TOKEN" ] || [ -z "$GL_SERVER" ] \
        && exiterr "some variables are missing: GL_USERNAME, GL_TOKEN, GL_SERVER"
    echo "GL_USERNAME       = $GL_USERNAME"      > $GL_CONFIG
    echo "GL_TOKEN          = $GL_TOKEN"         >> $GL_CONFIG
    echo "GL_SERVER         = $GL_SERVER"        >> $GL_CONFIG
    echo "GL_REGISTRY       = $GL_REGISTRY"      >> $GL_CONFIG
    echo "GL_TEMPLATE_HOST  = $GL_TEMPLATE_HOST" >> $GL_CONFIG
    chmod 0600 $GL_CONFIG
    echo Created config: $GL_CONFIG
    echo Checking preconditions ...
    check_preconditions
    exit 1
}
# api               <endpoint>        return API result for endpoint
glapi () { 
    $CURL --silent --header 'Accept: application/json' --header "PRIVATE-TOKEN: $GL_TOKEN" "https://$GL_SERVER/api/v4/$1"
    echo
}
# id                                  return digits after '=' in "path = id"
glid          () { sed -re 's/^.*\=|;|\s+//g'; }
glrexp.or     () { echo "$@" | tr ' ' '|' ; }
# filter            <args>            return all matches where args build an arg1|arg2|...|argN
glfilter      () { local pattern="$(glrexp.or $@)"; grep -P "\.(?:$pattern)"; }
# forall            <cmd> <args>      call <cmd> with <args> for every input line (reference line in args with {})
glforall      () { xargs -i "$0" "$@"; }
# gron.filter       <args>            combine gron and filter <args>
glgron.filter () { gron -s | glfilter "$@"; }
# gron.grep         <args>            combine gron and grep <args>
glgron.grep   () { gron -s | grep "$@"; }
# rootgroup         <groupname>       return root group id of all projects in <groupname>
glrootgroup   () {
    glapi groups \
    | glgron.filter full_path id \
    | grep -Pv "$1"'.*/.*/' \
    | grep -A1 "$1" \
    | tail -1 \
    | glid \
    | glforall api groups/{} \
    | glgron.grep 'json\[0\].parent_id' \
    | $0 id
}
# group.info        <id>              return group object of group with <id>
glgroup.info      () { glapi groups/$1; }
# group.repos       <id>              return all repos under group with <id>
glgroup.repos     () { glapi groups/$1 | glgron.grep .http_url_to_repo | sed -re 's/.*=|"|\s+//g'; }
# group.subgroups   <id>              return all subgroups under group with <id>
glgroup.subgroups () { glapi groups/$1/subgroups; }
# group.allrepos    <id>              return all repos under group with <id> (recursively)
glgroup.allrepos  () {
    local group="$1"
    glgroup.subgroups $group | glgron.filter id | glid | while read gid ; do
        glgroup.repos $gid
        glgroup.allrepos $gid
    done
}
getall            () { local p=0; while glapi "$1?all_available=true&per_page=100&page=$p" | grep -Ev '^\[\]$' | grep . ; do p=$((p+1)); done; }
# allgroups                           return all groups
glallgroups       () { getall groups; }
# allprojects                         return all projects
glallprojects     () { getall projects; }
# allparents        <id> <chain>      return all parent ids starting by group <id> prepending <chain>
glallparents  () { 
    [ "$1" == null ] \
        && echo $2 \
        && return
    glgroup.info "$1" \
        | glgron.grep '\]\.parent_id ' \
        | glid \
        | glforall allparents {} "$2 $1" 
}
# search            <scope> <search>  return all items of <scope> (groups,projects) matching <search>
glsearch          () { glapi "search?scope=$1&search=$2"; }
# project.info      <id>              return project object of project with <id>
glproject.info      () { glapi projects/$1; }
# help                                print this help text
glhelp () { 
    echo -e "Usage: $(basename $0) <cmd> <args>\n  query Gitlab API\n\n Docs:\n   $GL_URL_APIDOCS\n\n Commands:"
    set \
    | grep  -E 'gl.*\()' \
    | sed -re 's/^gl\.?|\s.*//g' \
    | xargs -i grep '# {}' $0 \
    | sed -re 's|^#|  |'
    echo
    exit "$1"
}
# project.vars      <name>  <cifile>  return all CI variable of project <name> with <cifile:-.gitlab-ci.yml>
glproject.vars () {
    local projectname=$1 cifile=${2:-.gitlab-ci.yml} id_self=$(mktemp)
    glsearch projects "$projectname"\
        | glgron.grep -E '\]\.(id|namespace\.parent_id)' \
        | glid \
        | xargs -n2 echo > $id_self

    local id_includes=$(mktemp)
    yq .include.[].project $cifile \
        | grep -v null \
        | xargs -i basename {} \
        | glforall search projects {} \
        | glgron.grep -E '\]\.(id|namespace\.parent_id)' \
        | glid \
        | xargs -n2 echo > $id_includes

    local id_parents=$(mktemp)
    cat $id_self $id_includes | awk '{print $2}' | sort -u \
        | glforall allparents {} >  $id_parents

    local vars_project=$(mktemp)
    cat $id_self $id_includes | awk '{print $1}' \
        | glforall api projects/{}/variables > $vars_project

    local vars_groups=$(mktemp)
    cat $id_parents | tr ' ' '\n' \
        | glforall api groups/{}/variables > $vars_groups

    cat $vars_groups \
        | glgron.grep -E '\.(key|value)' \
        | gron -u | yq -P .[] | grep -v null \
        | perl -pe 's/^-.*key:(.*)\n/$1: /m;' \
                -e 's/\s+value://'
    echo "\
 CI_REGISTRY_USER: $GL_USERNAME
 CI_REGISTRY_PASSWORD: $GL_TOKEN
 CI_TEMPLATE_REGISTRY_HOST: $GL_TEMPLATE_HOST
 CI_REGISTRY: $GL_REGISTRY
"
    rm $vars_groups $vars_project $id_parents $id_includes $id_self
}

main () {
    [ "$1" == init ] || check_preconditions
    fn="$1"
    [ -n "$fn" ] || glhelp 0 && { 
        command -v gl$fn >&/dev/null \
        || exiterr "Error: unknown command: $fn"
    } && shift && gl$fn "$@" 
}

main "$@"